--- VerdantDefendersGodot/scripts/DungeonController.gd
+++ VerdantDefendersGodot/scripts/DungeonController.gd
@@ -1,111 +0,0 @@
-extends Node2D
-class_name DungeonController
-
-signal next_room
-
-var dungeon := {}
-var layer_index := 0
-var room_index := 0
-var state := "combat"
-var _current_shop := null
-var _current_event := null
-
-const RoomScene: PackedScene = preload("res://Scenes/Room.tscn")
-
-func _ready():
-    _load_dungeon()
-    start()
-
-func _load_dungeon():
-    var file = FileAccess.open("res://Data/dungeon.json", FileAccess.READ)
-    if file:
-        dungeon = JSON.parse_string(file.get_as_text())
-
-func start():
-    layer_index = 0
-    room_index = 0
-    load_room()
-
-func load_room():
-    var room = RoomScene.instantiate()
-    add_child(room)
-    room.connect("room_cleared", Callable(self, "_on_room_cleared"))
-    room.spawn_room(room_index)
-
-func _on_room_cleared():
-    room_index += 1
-    if state == "shop":
-        _open_shop()
-        return
-    if state == "event":
-        _open_event()
-        return
-    var rooms = int(dungeon.layers[layer_index].rooms)
-    if room_index >= rooms:
-        start_boss_battle(dungeon.layers[layer_index].boss)
-    else:
-        emit_signal("next_room")
-        if room_index % 3 == 0:
-            state = "shop"
-        elif room_index % 5 == 0:
-            state = "event"
-        load_room()
-
-func start_boss_battle(name:String):
-    var boss = preload("res://Scenes/Boss.tscn").instantiate() as Boss
-    boss.name = name
-    add_child(boss)
-    boss.connect("boss_defeated", Callable(self, "_on_boss_defeated"))
-
-func _open_shop():
-    _current_shop = preload("res://Scenes/Shop.tscn").instantiate()
-    add_child(_current_shop)
-    _current_shop.connect("card_bought", Callable(self, "_on_card_bought"))
-    _current_shop.connect("heal_clicked", Callable(self, "_on_heal_clicked"))
-    _current_shop.connect("remove_clicked", Callable(self, "_on_remove_clicked"))
-
-func _open_event():
-    _current_event = preload("res://Scenes/Event.tscn").instantiate()
-    add_child(_current_event)
-    _current_event.connect("choice_selected", Callable(self, "_on_event_choice"))
-
-func _on_card_bought(card_name:String):
-    get_node("Game").buy_card(card_name)
-    _close_shop()
-
-func _on_heal_clicked():
-    get_node("Game").heal_player()
-    _close_shop()
-
-func _on_remove_clicked():
-    get_node("Game").remove_from_deck()
-    _close_shop()
-
-func _close_shop():
-    if _current_shop:
-        _current_shop.queue_free()
-        _current_shop = null
-    state = "event"
-    _open_event()
-
-func _on_event_choice(effect:String):
-    get_node("Game").apply_event_effect(effect)
-    _close_event()
-
-func _close_event():
-    if _current_event:
-        _current_event.queue_free()
-        _current_event = null
-    state = "combat"
-    emit_signal("next_room")
-    load_room()
-
-func _on_boss_defeated(boss):
-    layer_index += 1
-    room_index = 0
-    boss.queue_free()
-    emit_signal("next_room")
-    if layer_index < dungeon.layers.size():
-        load_room()
-    else:
-        print("Run complete!")
